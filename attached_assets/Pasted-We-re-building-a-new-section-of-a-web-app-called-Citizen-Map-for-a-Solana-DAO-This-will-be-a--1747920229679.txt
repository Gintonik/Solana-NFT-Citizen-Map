We‚Äôre building a new section of a web app called **"Citizen Map"** for a Solana DAO. This will be a visual map where holders of a specific NFT collection ("PERKS") can pin their NFT to a location and showcase it to others.

### The app should have the following structure and functionality:

---

### üåç FRONTEND:

Use **React + Leaflet.js** (or another lightweight JS map library) to create an interactive, zoomable, fast-loading map with the following features:

1. **Map View**
   - Display a zoomable world map (dark theme preferred).
   - On load, show **all existing pins** from a local `citizens.json` file.
   - Each pin represents a PERKS NFT and includes:
     - NFT image and name
     - Links to X / Telegram / Discord (if provided)
     - Optional hover effect or popup modal with info

2. **Drop a Pin Flow**
   - Button: ‚ÄúDrop a Citizen Pin‚Äù
   - Step 1: User clicks on map to drop a new pin.
   - Step 2: Prompt for **Solana wallet address**
     - This is not verified, just collected for indexing
   - Step 3: From the local `nft-owners.json` (see below), show all PERKS NFTs owned by that wallet
     - Display as image grid (with name, token ID)
     - Allow user to select 1 or more NFTs
   - Step 4: Prompt for social links (X handle, Telegram, Discord)
   - Step 5: Save the submission as a new pin in `citizens.json`

---

### üìÅ BACKEND (LOCAL STORAGE ONLY FOR NOW):

1. Use a local JSON file called `nft-owners.json`:
   - Structure:
     ```json
     {
       "wallet_address_1": ["mint_id_1", "mint_id_2"],
       "wallet_address_2": ["mint_id_3"]
     }
     ```
   - This maps each wallet address to the PERKS NFTs it owns.
   - We‚Äôve already indexed the NFT collection, so this JSON is assumed to be available and updated once per day.

2. Use another local JSON file called `citizens.json` to store the pins:
   - Structure:
     ```json
     [
       {
         "location": [lat, lng],
         "wallet": "wallet_address",
         "nfts": ["mint_id_1"],
         "socials": {
           "x": "https://x.com/username",
           "telegram": "https://t.me/username",
           "discord": "username#1234"
         },
         "timestamp": "ISO string"
       }
     ]
     ```

3. Add functions to:
   - Load all pins on app start from `citizens.json`
   - Append new pins on user submission
   - Prevent duplicate pins by same wallet + mint

---

### üß™ OTHER REQUIREMENTS:

- No wallet connection needed yet
- Must be lightweight and mobile responsive
- Easy to re-integrate on-chain verification later (so structure code cleanly)
- For NFT images, use the existing metadata you already indexed (hosted image URLs in the collection)

---

### üîÑ FUTURE FEATURES (optional, not part of this prompt):

- Wallet verification
- Map filters (by region, by traits, by activity)
- Admin controls to remove spam
- NFT trading links or DAO roles

---

### ‚úÖ To Summarize:

Build a React app that displays a zoomable map with pins representing NFTs from the PERKS collection. Users can drop a pin, enter their wallet, select NFTs from a preloaded JSON database (`nft-owners.json`), enter social links, and submit. All pins are stored in `citizens.json` and shown to all users on page load.

Use modern best practices, clean component structure, and comments. Let‚Äôs start!
